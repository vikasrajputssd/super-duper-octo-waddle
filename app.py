import streamlit as st
import sqlite3
import pandas as pd
import plotly.express as px
import time
from datetime import datetime, timedelta

# --- DB Setup ---
conn = sqlite3.connect('ladli_joo_data.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS japa_log (
            id INTEGER PRIMARY KEY,
            date TEXT,
            count INTEGER)''')
c.execute('''CREATE TABLE IF NOT EXISTS meditation_log (
            id INTEGER PRIMARY KEY,
            date TEXT,
            duration INTEGER)''')
conn.commit()

# --- App Config ---
st.set_page_config(page_title="Supreme Ladli Joo 2.0", layout='wide')

# --- CSS Styling ---
st.markdown("""
<style>
body {
    background-color: #fff8f0;
    font-family: 'Palatino Linotype', serif;
    color: #5a0b0b;
}
h1, h2 {
    color: #a10000;
    text-align: center;
    font-weight: 700;
}
.sidebar .sidebar-content {
    background-image: url('https://upload.wikimedia.org/wikipedia/commons/9/9b/Ladli_Joo_image_placeholder.jpg');
    background-size: cover;
}
</style>
""", unsafe_allow_html=True)

# --- Sidebar Menu ---
st.sidebar.title("ЁЯЩП рд╢реНрд░реА рдЧреБрд░реБрджреЗрд╡ рдПрд╡рдВ рд▓рд╛рдбрд╝рд▓реА рдЬреВ рдХреА рдХреГрдкрд╛ рд╕реЗ")
menu = st.sidebar.radio("рдореЗрдиреВ рдЪреБрдиреЗрдВ:", ["рдирд╛рдо рдЬрдк", "рдзреНрдпрд╛рди", "рднрдХреНрддрд┐ рд╕рдВрджреЗрд╢", "рд╕реЗрдЯрд┐рдВрдЧреНрд╕"])

# --- Helper Functions ---
def add_japa(count):
    today = datetime.now().strftime("%Y-%m-%d")
    c.execute("SELECT count FROM japa_log WHERE date = ?", (today,))
    row = c.fetchone()
    if row:
        new_count = row[0] + count
        c.execute("UPDATE japa_log SET count = ? WHERE date = ?", (new_count, today))
    else:
        c.execute("INSERT INTO japa_log (date, count) VALUES (?, ?)", (today, count))
    conn.commit()

def get_japa_data():
    c.execute("SELECT date, count FROM japa_log ORDER BY date DESC LIMIT 30")
    data = c.fetchall()
    df = pd.DataFrame(data, columns=['Date', 'Count'])
    if df.empty:
        df = pd.DataFrame({'Date': [], 'Count': []})
    return df

def add_meditation(duration):
    today = datetime.now().strftime("%Y-%m-%d")
    c.execute("SELECT duration FROM meditation_log WHERE date = ?", (today,))
    row = c.fetchone()
    if row:
        new_duration = row[0] + duration
        c.execute("UPDATE meditation_log SET duration = ? WHERE date = ?", (new_duration, today))
    else:
        c.execute("INSERT INTO meditation_log (date, duration) VALUES (?, ?)", (today, duration))
    conn.commit()

def get_meditation_data():
    c.execute("SELECT date, duration FROM meditation_log ORDER BY date DESC LIMIT 30")
    data = c.fetchall()
    df = pd.DataFrame(data, columns=['Date', 'Duration (min)'])
    if df.empty:
        df = pd.DataFrame({'Date': [], 'Duration (min)': []})
    return df

# --- Pages ---

if menu == "рдирд╛рдо рдЬрдк":
    st.title("ЁЯФФ рдирд╛рдо рдЬрдк рдкреГрд╖реНрда")
    st.markdown("**рд╢реНрдпрд╛рдорд╛-рд╢реНрдпрд╛рдо рдХрд╛ рдирд╛рдо рдЬрдк рдХрд░реЗрдВ рдФрд░ рдЕрдкрдиреА рднрдХреНрддрд┐ рдХреА рдЧрд┐рдирддреА рдмрдврд╝рд╛рдПрдВред**")
    count = st.number_input("рдПрдХ рдмрд╛рд░ рдореЗрдВ рдХрд┐рддрдиреЗ рдЬрдк рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?", min_value=1, max_value=108, value=1)
    if st.button("рдЬрдк рдЬреЛрдбрд╝реЗрдВ"):
        add_japa(count)
        st.success(f"рдЖрдкрдХреЗ рдЬрдк рдореЗрдВ {count} рдЬрдк рдЬреЛрдбрд╝реЗ рдЧрдПред рд▓рд╛рдбрд╝рд▓реА рдЬреВ рдХреА рдХреГрдкрд╛ рдмрдиреА рд░рд╣реЗ!")
    
    df_japa = get_japa_data()
    if not df_japa.empty:
        fig = px.bar(df_japa, x='Date', y='Count', title="рдкрд┐рдЫрд▓реЗ 30 рджрд┐рдиреЛрдВ рдХреЗ рдирд╛рдо рдЬрдк", labels={"Count":"рдЬрдк рд╕рдВрдЦреНрдпрд╛"})
        st.plotly_chart(fig)

elif menu == "рдзреНрдпрд╛рди":
    st.title("ЁЯХЙя╕П рдзреНрдпрд╛рди рдкреГрд╖реНрда")
    duration = st.slider("рдзреНрдпрд╛рди рдХрд╛ рд╕рдордп (рдорд┐рдирдЯ)", 1, 60, 10)
    if st.button("рдзреНрдпрд╛рди рд╢реБрд░реВ рдХрд░реЗрдВ"):
        st.info(f"рдзреНрдпрд╛рди рд╢реБрд░реВ: {duration} рдорд┐рдирдЯ")
        add_meditation(duration)
        # рдзреНрдпрд╛рди рдЯрд╛рдЗрдорд░ (рд╕рд┐рдВрдкрд▓)
        for i in range(duration * 60, 0, -1):
            mins, secs = divmod(i, 60)
            st.markdown(f"<h1 style='text-align:center; color:#a10000;'>{mins:02d}:{secs:02d}</h1>", unsafe_allow_html=True)
            time.sleep(1)
        st.success("рдзреНрдпрд╛рди рд╕рдорд╛рдкреНрдд рд╣реБрдЖ! рдЬрдп рд╢реНрд░реА рд░рд╛рдзрд╛!")

    df_meditation = get_meditation_data()
    if not df_meditation.empty:
        fig = px.line(df_meditation, x='Date', y='Duration (min)', title="рдкрд┐рдЫрд▓реЗ 30 рджрд┐рдиреЛрдВ рдХрд╛ рдзреНрдпрд╛рди рд╕рдордп")
        st.plotly_chart(fig)

elif menu == "рднрдХреНрддрд┐ рд╕рдВрджреЗрд╢":
    st.title("ЁЯМ╕ рднрдХреНрддрд┐ рд╕рдВрджреЗрд╢")
    st.markdown("""
    > "рдЧреБрд░реБрджреЗрд╡ рдФрд░ рд▓рд╛рдбрд╝рд▓реА рдЬреВ рдХреА рдХреГрдкрд╛ рд╕реЗ рдорди рдХреЛ рд╢рд╛рдВрддрд┐, рдЬреАрд╡рди рдХреЛ рд╕рдореГрджреНрдзрд┐ рдорд┐рд▓реЗред  
    > рдзреНрдпрд╛рди рдФрд░ рдирд╛рдо рдЬрдк рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдЖрддреНрдорд╛ рдХреЛ рдкреНрд░рдмреБрджреНрдз рдХрд░реЗрдВред"
    """)
    st.image("https://upload.wikimedia.org/wikipedia/commons/3/3f/Radha_Krishna_celebration_Vrindavan.jpg", use_column_width=True)

elif menu == "рд╕реЗрдЯрд┐рдВрдЧреНрд╕":
    st.title("тЪЩя╕П рд╕реЗрдЯрд┐рдВрдЧреНрд╕")
    st.markdown("рдпрд╣рд╛рдВ рдЖрдк рдЕрдкрдиреА рдкрд╕рдВрдж рдФрд░ рдРрдк рдХреЗ рдЕрдиреНрдп рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рд╕реЗрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред")
    # рдлреНрдпреВрдЪрд░ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдХреЗ рд▓рд┐рдП рдЬрдЧрд╣

# --- Footer ---
st.markdown("---")
st.markdown(
    "<p style='text-align:center; color:#a10000;'>┬й 2025 рд╢реНрд░реА рдЧреБрд░реБрджреЗрд╡ рдФрд░ рд▓рд╛рдбрд╝рд▓реА рдЬреВ рдХреА рдЕрдиреБрдХрдореНрдкрд╛ рд╕реЗ | рд░рд╛рдзрд╛ рдорд╛рдзрд╡ рдзрд╛рдо, рд╡реГрдВрджрд╛рд╡рди</p>",
    unsafe_allow_html=True
)

# --- рдмрдВрдж ---
conn.close()
